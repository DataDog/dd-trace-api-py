attributes:
  Span:
    shares_self: true
    methods:
      __enter__:
        return_info:
          type: "'Span'"
          value: "self"
      __exit__:
        posargs:
          exc_type:
            type: "Type[BaseException]"
          exc_val:
            type: "BaseException"
          exc_tb:
            type: "Optional[TracebackType]"
      set_exc_info:
        posargs:
          exc_type:
            type: "Type[BaseException]"
          exc_val:
            type: "BaseException"
          exc_tb:
            type: "Optional[TracebackType]"
      set_traceback:
        kwargs:
          limit:
            type: "Optional[int]"
      set_tags:
        posargs:
          tags:
            type: "Dict[Union[Text, bytes], Any]"
      set_tag_str:
        posargs:
          key:
            type: "Union[Text, bytes]"
          value:
            type: "Text"
      set_struct_tag:
        posargs:
          key:
            type: "str"
          value:
            type: "Dict[str, Any]"
      finish_with_ancestors: {}
      finish:
        kwargs:
          finish_time:
            type: "Optional[float]"
      set_tag:
        posargs:
          key:
            type: "Union[Text, bytes]"
        kwargs:
          value:
            type: "Any"

  data_streams:
    methods:
      set_consume_checkpoint:
        posargs:
          typ:
            type: "str"
          source:
            type: "str"
          carrier_get:
            type: "Callable"
      set_produce_checkpoint:
        posargs:
          typ:
            type: "str"
          target:
            type: "str"
          carrier_set:
            type: "Callable"
  Tracer:
    shares_self: true
    methods:
      flush: {}
      set_tags:
        posargs:
          tags:
            type: "Dict[str, str]"
      shutdown:
        posargs:
          timeout:
            type: "Optional[float]"
      start_span:
        posargs:
          name:
            type: "str"
        kwargs:
          child_of:
            type: "Optional[Span]"
          service:
            type: "Optional[str]"
          resource:
            type: "Optional[str]"
          span_type:
            type: "Optional[str]"
          activate:
            type: "bool"
            default: "False"
        return_info:
          type: "Span"
          value: "Span()"
      current_root_span:
        return_info:
          type: "Span"
          value: "Span()"
      current_span:
        return_info:
          type: "Span"
          value: "Span()"
      trace:
        posargs:
          name:
            type: "str"
        kwargs:
          service:
            type: "Optional[str]"
          resource:
            type: "Optional[str]"
          span_type:
            type: "Optional[str]"
        return_info:
          type: "Span"
          value: "Span()"
      wrap:
        decorator: True
        uses_impl_retval: True
        kwargs:
          name:
            type: "Optional[str]"
          service:
            type: "Optional[str]"
          resource:
            type: "Optional[str]"
          span_type:
            type: "Optional[str]"
        return_info:
          type: "Callable[[TypeVar('AnyCallable', bound=Callable)], TypeVar('AnyCallable', bound=Callable)]"
          value: "wrap_decorator"
  Pin:
    methods:
      onto:
        posargs:
          obj:
            type: "Any"
        kwargs:
          send:
            type: "bool"
            default: True
      remove_from:
        posargs:
          obj:
            type: "Any"
      clone:
        kwargs:
          service:
            type: "Optional[str]"
          tags:
            type: "Optional[Dict[str, str]]"
          tracer:
            type: "Tracer"
  tracer:
    instance_of: "Tracer"
  pin:
    attributes:
      Pin: "Pin"
  span:
    attributes:
      Span: "Span"
