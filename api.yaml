attributes:
  Span:
    shares_self: true
    methods:
      __enter__:
        return_info:
          type: "'Span'"
          value: "self"
      __exit__:
        posargs:
          exc_type:
            type: "Type[BaseException]"
          exc_val:
            type: "BaseException"
          exc_tb:
            type: "Optional[TracebackType]"
      set_exc_info:
        docstring: "Tag the span with an error tuple as from ``sys.exc_info()``"
        posargs:
          exc_type:
            type: "Type[BaseException]"
          exc_val:
            type: "BaseException"
          exc_tb:
            type: "Optional[TracebackType]"
      set_traceback:
        docstring: |
          "If the current stack has an exception, tag the span with the relevant error info. If not, tag
          it with the current python stack."
        kwargs:
          limit:
            type: "Optional[int]"
      set_tags:
        docstring: "Set a dictionary of tags on the given span. Keys and values must be strings (or stringable)"
        posargs:
          tags:
            type: "Dict[Union[Text, bytes], Any]"
      finish_with_ancestors:
        docstring: |
          "
          Finish this span along with all (accessible) ancestors of this span.

          This method is useful if a sudden program shutdown is required and finishing
          the trace is desired.
          "
      finish:
        docstring: |
          "Mark the end time of the span and submit it to the tracer.
          If the span has already been finished don't do anything.
          "
        kwargs:
          finish_time:
            type: "Optional[float]"
            doc: "The end time of the span, in seconds. Defaults to ``now``."

  Tracer:
    docstring: |
      'Tracer is used to create and submit spans that measure the
      execution time of sections of code. A global tracer instance is made available
      as ``dd_trace_api.tracer``, so there is no need to instantiate this class.
      '
    shares_self: true
    methods:
      flush:
        docstring: |
          "
          Flush the tracer's internal buffer, sending spans to Datadog's intake endpoint
          "
      set_tags:
        docstring: |
          "
          Set some tags at the tracer level. This will append those tags to each span created by
          the tracer.
          "
        posargs:
          tags:
            type: "Dict[str, str]"
            doc: "dict of tags to set at tracer level"
      shutdown:
        docstring: |
          "Shutdown the tracer and flush finished traces. Avoid calling shutdown multiple times."
        posargs:
          timeout:
            type: "Optional[float]"
            doc: |
              "How long in seconds to wait for the background worker to flush traces before exiting
              or ``None`` to block until flushing has successfully completed"
      start_span:
        docstring: |
          'Return a span that represents an operation called ``name``.

          Note that the ``.trace`` method will almost always be preferred
          over this method as it provides automatic span parenting. This method
          should only be used if manual parenting is desired.

          To start a new root span::

              span = tracer.start_span("web.request")

          To create a child for a root span::

              root_span = tracer.start_span("web.request")
              span = tracer.start_span("web.decoder", child_of=root_span)

          Spans from ``start_span`` are not activated by default::

              with tracer.start_span("parent") as parent:
                  assert tracer.current_span() is None
                  with tracer.start_span("child", child_of=parent):
                      assert tracer.current_span() is None

              new_parent = tracer.start_span("new_parent", activate=True)
              assert tracer.current_span() is new_parent
          '
        posargs:
          name:
            type: "str"
            doc: the name of the operation being traced
        kwargs:
          child_of:
            type: "Optional[Span]"
            doc: a ``Span`` instance representing the parent for this span
          service:
            type: "Optional[str]"
            doc: the name of the service being traced
          resource:
            type: "Optional[str]"
            doc: an optional name of the resource being tracked
          span_type:
            type: "Optional[str]"
            doc: an optional operation type
          activate:
            type: "bool"
            default: "False"
            doc: activate the span once it is created
        return_info:
          type: "Span"
          value: "Span()"
      current_root_span:
        docstring: |
          "Returns the local root span of the current execution/process.

          Note - This cannot be used to access the true root span of the trace
          in a distributed tracing setup if the actual root span occurred in
          another execution/process.

          This is useful for attaching information to the local root span
          of the current execution/process, which is often also service
          entry span.

          For example::

              # get the local root span
              local_root_span = tracer.current_root_span()
              # set the host just once on the root span
              if local_root_span:
                  local_root_span.set_tag('host', '127.0.0.1')
          "
        return_info:
          type: "Span"
          value: "Span()"
      current_span:
        docstring: |
          'Return the active span in the current execution context.

          Note that there may be an active span from a distributed trace which will not
          be returned by this method.
          '
        return_info:
          type: "Span"
          value: "Span()"
      trace:
        docstring: |
          '
          Activate and return a new span that inherits from the current active span.

          The returned span *must* be ``finish``ed or it will remain in memory
          indefinitely::

              >>> span = tracer.trace("web.request")
                  try:
                      # do something
                  finally:
                      span.finish()

              >>> with tracer.trace("web.request") as span:
                      # do something

          Example of the automatic parenting::

              parent = tracer.trace("parent")     # has no parent span
              assert tracer.current_span() is parent

              child  = tracer.trace("child")
              assert child.parent_id == parent.span_id
              assert tracer.current_span() is child
              child.finish()

              # parent is now the active span again
              assert tracer.current_span() is parent
              parent.finish()

              assert tracer.current_span() is None

              parent2 = tracer.trace("parent2")
              assert parent2.parent_id is None
              parent2.finish()
          '
        posargs:
          name:
            type: "str"
            doc: the name of the operation being traced
        kwargs:
          service:
            type: "Optional[str]"
            doc: the name of the service being traced. If not set, it will inherit the service from its parent.
          resource:
            type: "Optional[str]"
            doc: an optional name of the resource being tracked
          span_type:
            type: "Optional[str]"
            doc: an optional operation type
        return_info:
          type: "Span"
          value: "Span()"
      wrap:
        docstring: |
          '
          A decorator used to trace an entire function. If the traced function
          is a coroutine, it traces the coroutine execution when is awaited.
          If a ``wrap_executor`` callable has been provided in the ``Tracer.configure()``
          method, it will be called instead of the default one when the function
          decorator is invoked.

          >>> @tracer.wrap("my.wrapped.function", service="my.service")
              def run():
                  return "run"

          >>> # name will default to "execute" if unset
              @tracer.wrap()
              def execute():
                  return "executed"

          >>> # or use it in asyncio coroutines
              @tracer.wrap()
              async def coroutine():
                  return "executed"

          >>> @tracer.wrap()
              @asyncio.coroutine
              def coroutine():
                  return "executed"

          You can access the current span using `tracer.current_span()` to set
          tags:

          >>> @tracer.wrap()
              def execute():
                  span = tracer.current_span()
                  span.set_tag("a", "b")
          '
        decorator: True
        uses_impl_retval: True
        kwargs:
          name:
            type: "Optional[str]"
            doc: the name of the operation being traced. If not set, defaults to the fully qualified function name.
          service:
            type: "Optional[str]"
            doc: the name of the service being traced. If not set, it will inherit the service from its parent.
          resource:
            type: "Optional[str]"
            doc: an optional name of the resource being tracked
          span_type:
            type: "Optional[str]"
            doc: an optional operation type
        return_info:
          type: "Callable[[TypeVar('AnyCallable', bound=Callable)], TypeVar('AnyCallable', bound=Callable)]"
          value: "wrap_decorator"
  tracer:
    instance_of: "Tracer"
  span:
    attributes:
      Span: "Span"
